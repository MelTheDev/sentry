#!/usr/bin/env python
from sentry.runner import configure

configure()
import logging
import os
import uuid
from datetime import datetime, timezone

import click
from arroyo import Topic as ArroyoTopic
from arroyo.backends.kafka import KafkaPayload, KafkaProducer, build_kafka_configuration
from sentry_kafka_schemas.codecs import Codec
from sentry_kafka_schemas.schema_types.snuba_uptime_results_v1 import SnubaUptimeResult
from sentry_kafka_schemas.schema_types.uptime_results_v1 import CHECKSTATUS_SUCCESS

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sentry.conf.server")

import django

django.setup()

from sentry.conf.types.kafka_definition import Topic, get_topic_codec
from sentry.utils.kafka_config import get_kafka_producer_cluster_options, get_topic_definition

logger = logging.getLogger(__name__)


def get_snuba_uptime_checks_producer() -> KafkaProducer:
    cluster_name = get_topic_definition(Topic.SNUBA_UPTIME_RESULTS)["cluster"]
    producer_config = get_kafka_producer_cluster_options(cluster_name)
    producer_config.pop("compression.type", None)
    producer_config.pop("message.max.bytes", None)
    return KafkaProducer(build_kafka_configuration(default_config=producer_config))


SNUBA_UPTIME_RESULTS_CODEC: Codec[SnubaUptimeResult] = get_topic_codec(Topic.SNUBA_UPTIME_RESULTS)


@click.command()
@click.option("--organization-id", type=int, required=True, help="Organization ID")
@click.option("--project-id", type=int, required=True, help="Project ID")
@click.option("--subscription-id", type=str, required=False, help="Subscription ID")
@click.option("--region", type=str, default="us", help="Region slug")
def main(organization_id: int, project_id: int, subscription_id: str, region: str) -> None:
    """Produce a mock uptime result message to the SNUBA_UPTIME_RESULTS topic."""
    now = datetime.now(timezone.utc)
    now_ms = int(now.timestamp() * 1000)

    message: SnubaUptimeResult = {
        "guid": str(uuid.uuid4()),
        "subscription_id": str(uuid.uuid4()),
        "status": CHECKSTATUS_SUCCESS,
        "status_reason": None,
        "trace_id": str(uuid.uuid4()),
        "span_id": str(uuid.uuid4())[:16],
        "scheduled_check_time_ms": now_ms,
        "actual_check_time_ms": now_ms,
        "duration_ms": 100,
        "request_info": None,
        "organization_id": organization_id,
        "project_id": project_id,
        "retention_days": 90,
        "region_slug": region,
    }

    producer = get_snuba_uptime_checks_producer()
    topic = get_topic_definition(Topic.SNUBA_UPTIME_RESULTS)["real_topic_name"]
    payload = KafkaPayload(None, SNUBA_UPTIME_RESULTS_CODEC.encode(message), [])

    producer.produce(ArroyoTopic(topic), payload)
    producer.close()

    logger.info("Successfully produced message to %s", topic)


if __name__ == "__main__":
    main()
