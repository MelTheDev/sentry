from __future__ import annotations

import logging
from datetime import datetime, timedelta
from typing import Any

import orjson
import requests
from django.conf import settings
from django.contrib.auth.models import AbstractBaseUser, AnonymousUser
from rest_framework.response import Response

from sentry import eventstore, features
from sentry.api.api_owners import ApiOwner
from sentry.api.api_publish_status import ApiPublishStatus
from sentry.api.base import region_silo_endpoint
from sentry.api.bases.group import GroupEndpoint
from sentry.api.serializers import EventSerializer, serialize
from sentry.autofix.utils import get_autofix_repos_from_project_code_mappings, get_autofix_state
from sentry.integrations.utils.code_mapping import get_sorted_code_mapping_configs
from sentry.models.group import Group
from sentry.seer.signed_seer_api import get_seer_salted_url, sign_with_seer_secret
from sentry.tasks.autofix import check_autofix_status
from sentry.types.ratelimit import RateLimit, RateLimitCategory
from sentry.users.models.user import User
from sentry.users.services.user.service import user_service

logger = logging.getLogger(__name__)

from rest_framework.request import Request

TIMEOUT_SECONDS = 60 * 30  # 30 minutes


@region_silo_endpoint
class GroupAutofixEndpoint(GroupEndpoint):
    publish_status = {
        "POST": ApiPublishStatus.EXPERIMENTAL,
        "GET": ApiPublishStatus.EXPERIMENTAL,
    }
    owner = ApiOwner.ML_AI
    enforce_rate_limit = True
    rate_limits = {
        "POST": {
            RateLimitCategory.IP: RateLimit(limit=10, window=60),
            RateLimitCategory.USER: RateLimit(limit=10, window=60),
            RateLimitCategory.ORGANIZATION: RateLimit(limit=10, window=60),
        }
    }

    def _get_serialized_event(
        self, event_id: str, group: Group, user: AbstractBaseUser | AnonymousUser
    ) -> dict[str, Any] | None:
        event = eventstore.backend.get_event_by_id(group.project.id, event_id, group_id=group.id)

        if not event:
            return None

        serialized_event = serialize(event, user, EventSerializer())
        return serialized_event

    def _make_error_metadata(self, autofix: dict, reason: str):
        return {
            **autofix,
            "completed_at": datetime.now().isoformat(),
            "status": "ERROR",
            "fix": None,
            "error_message": reason,
            "steps": [],
        }

    def _respond_with_error(self, reason: str, status: int):
        return Response(
            {
                "detail": reason,
            },
            status=status,
        )

    def _call_autofix(
        self,
        user: User | AnonymousUser,
        group: Group,
        repos: list[dict],
        serialized_event: dict[str, Any],
        instruction: str,
        timeout_secs: int,
        pr_to_comment_on_url: str | None = None,
    ):
        path = "/v1/automation/autofix/start"
        body = orjson.dumps(
            {
                **sample,
                "organization_id": group.organization.id,
                "project_id": group.project.id,
                # "repos": repos,
                "issue": {
                    **sample["issue"],
                    "id": group.id,
                    # "title": group.title,
                    # "short_id": group.qualified_short_id,
                    # "events": [serialized_event],
                },
                # "instruction": instruction,
                # "timeout_secs": timeout_secs,
                # "last_updated": datetime.now().isoformat(),
                # "invoking_user": (
                #     {
                #         "id": user.id,
                #         "display_name": user.get_display_name(),
                #     }
                #     if not isinstance(user, AnonymousUser)
                #     else None
                # ),
                # "options": {
                #     "comment_on_pr_with_url": pr_to_comment_on_url,
                # },
            },
            option=orjson.OPT_NON_STR_KEYS,
        )

        url, salt = get_seer_salted_url(f"{settings.SEER_AUTOFIX_URL}{path}")
        response = requests.post(
            url,
            data=body,
            headers={
                "content-type": "application/json;charset=utf-8",
                **sign_with_seer_secret(
                    salt,
                    body=body,
                ),
            },
        )

        response.raise_for_status()

        return response.json().get("run_id")

    def post(self, request: Request, group: Group) -> Response:
        data = orjson.loads(request.body)

        # This event_id is the event that the user is looking at when they click the "Fix" button
        event_id = data.get("event_id", None)
        if event_id is None:
            event = group.get_recommended_event_for_environments()
            if not event:
                event = group.get_latest_event()

            if not event:
                return Response(
                    {
                        "detail": "Could not find an event for the issue, please try providing an event_id"
                    },
                    status=400,
                )
            event_id = event.event_id

        created_at = datetime.now().isoformat()

        if not (
            features.has("organizations:gen-ai-features", group.organization, actor=request.user)
            # and group.organization.get_option("sentry:gen_ai_consent_v2024_11_14", False)
        ):
            return self._respond_with_error("AI Autofix is not enabled for this project.", 403)

        # For now we only send the event that the user is looking at, in the near future we want to send multiple events.
        serialized_event = self._get_serialized_event(event_id, group, request.user)

        if serialized_event is None:
            return self._respond_with_error("Cannot fix issues without an event.", 400)

        if not any([entry.get("type") == "exception" for entry in serialized_event["entries"]]):
            return self._respond_with_error("Cannot fix issues without a stacktrace.", 400)

        repos = get_autofix_repos_from_project_code_mappings(group.project)

        # if not repos:
        #     return self._respond_with_error(
        #         "Found no Github repositories linked to this project. Please set up the Github Integration and code mappings if you haven't",
        #         400,
        #     )

        try:
            run_id = self._call_autofix(
                request.user,
                group,
                repos,
                serialized_event,
                data.get("instruction", data.get("additional_context", "")),
                TIMEOUT_SECONDS,
                data.get("pr_to_comment_on_url", None),  # support optional PR id for copilot
            )
        except Exception as e:
            logger.exception(
                "Failed to send autofix to seer",
                extra={
                    "group_id": group.id,
                    "created_at": created_at,
                    "exception": e,
                },
            )

            return self._respond_with_error(
                "Autofix failed to start.",
                500,
            )

        check_autofix_status.apply_async(args=[run_id], countdown=timedelta(minutes=15).seconds)

        return Response(
            status=202,
        )

    def get(self, request: Request, group: Group) -> Response:
        autofix_state = get_autofix_state(group_id=group.id)

        response_state: dict[str, Any] | None = None

        if autofix_state:
            response_state = autofix_state.dict()
            user_ids = autofix_state.actor_ids
            if user_ids:
                users = user_service.serialize_many(
                    filter={"user_ids": user_ids, "organization_id": request.organization.id},
                    as_user=request.user,
                )

                users_map = {user["id"]: user for user in users}

                response_state["users"] = users_map

            project = group.project
            repositories = []
            if project:
                code_mappings = get_sorted_code_mapping_configs(project=project)
                for mapping in code_mappings:
                    repo = mapping.repository
                    repositories.append(
                        {
                            "url": repo.url,
                            "external_id": repo.external_id,
                            "name": repo.name,
                            "provider": repo.provider,
                            "default_branch": mapping.default_branch,
                        }
                    )
            response_state["repositories"] = repositories

        return Response({"autofix": response_state})


sample = {
    "organization_id": 1,
    "project_id": 1,
    "repos": [
        {"provider": "github", "owner": "getsentry", "name": "seer", "external_id": "439438299"}
    ],
    "issue": {
        "id": "6042731264",
        "title": "ValidationError: 1 validation error for RootCauseAnalysisItem",
        "events": [
            {
                "id": "42fecd08b4184ba08e5922362e277dbd",
                "groupID": "6042731264",
                "eventID": "42fecd08b4184ba08e5922362e277dbd",
                "projectID": "6178942",
                "size": 73443,
                "entries": [
                    {
                        "data": {
                            "values": [
                                {
                                    "type": "ValidationError",
                                    "value": "1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing, input_value={'file_path': 'src/test/s...d validation behavior.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing",
                                    "mechanism": {"type": "ai_monitoring", "handled": False},
                                    "threadId": None,
                                    "module": "pydantic_core._pydantic_core",
                                    "stacktrace": {
                                        "frames": [
                                            {
                                                "filename": "seer/automation/autofix/steps/root_cause_step.py",
                                                "absPath": "/app/src/seer/automation/autofix/steps/root_cause_step.py",
                                                "module": "seer.automation.autofix.steps.root_cause_step",
                                                "package": None,
                                                "platform": None,
                                                "instructionAddr": None,
                                                "symbolAddr": None,
                                                "function": "_invoke",
                                                "rawFunction": None,
                                                "symbol": None,
                                                "context": [
                                                    [64, ""],
                                                    [
                                                        65,
                                                        "        summary = state.request.issue_summary",
                                                    ],
                                                    [66, "        if not summary:"],
                                                    [
                                                        67,
                                                        "            summary = self.context.get_issue_summary()",
                                                    ],
                                                    [68, ""],
                                                    [
                                                        69,
                                                        "        root_cause_output = RootCauseAnalysisComponent(self.context).invoke(",
                                                    ],
                                                    [70, "            RootCauseAnalysisRequest("],
                                                    [
                                                        71,
                                                        "                event_details=event_details,",
                                                    ],
                                                    [
                                                        72,
                                                        "                instruction=state.request.instruction,",
                                                    ],
                                                    [73, "                summary=summary,"],
                                                    [
                                                        74,
                                                        "                initial_memory=self.request.initial_memory,",
                                                    ],
                                                ],
                                                "lineNo": 69,
                                                "colNo": None,
                                                "inApp": True,
                                                "trust": None,
                                                "errors": None,
                                                "lock": None,
                                                "sourceLink": None,
                                                "vars": {
                                                    "event_details": "EventDetails(title='ValidationError: 1 validation error for GroupingRequest', exceptions=[ExceptionDetails(type='ValidationError', value=\"1 validation error for GroupingRequest\\nstacktrace\\n  Value error, stacktrace must be provided and not empty. [type=value_error, input_value='', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\", stacktrace=Stacktrace(frames=[StacktraceFrame(function='wrapper', filename='src/seer/json_api.py', abs_path='/app/src/seer/json_api.py', line_no=132, col_no=None, context=[(127, '            if not isinstance(data, dict):'), (128, '                sentry_sdk.capture_message(f\"Data is not an object: {type(data)}\")'), (129, '                raise BadRequest(\"Data is not an object\")'), (130, ''), (131, '            try:'), (132, '                result: BaseModel = implementation(request_annotation.model_validate(data))'), (133, '            except ValidationError as e:'), (134, '                sentry_sdk.capture_exception(e)'), (135...",
                                                    "kwargs": {},
                                                    "self": "<seer.automation.autofix.steps.root_cause_step.RootCauseStep object at 0x7f8c29a404d0>",
                                                    "state": "[Filtered]",
                                                },
                                            },
                                            {
                                                "filename": "langfuse/decorators/langfuse_decorator.py",
                                                "absPath": "/usr/local/lib/python3.11/dist-packages/langfuse/decorators/langfuse_decorator.py",
                                                "module": "langfuse.decorators.langfuse_decorator",
                                                "package": None,
                                                "platform": None,
                                                "instructionAddr": None,
                                                "symbolAddr": None,
                                                "function": "sync_wrapper",
                                                "rawFunction": None,
                                                "symbol": None,
                                                "context": [
                                                    [220, "            result = None"],
                                                    [221, ""],
                                                    [222, "            try:"],
                                                    [
                                                        223,
                                                        "                result = func(*args, **kwargs)",
                                                    ],
                                                    [224, "            except Exception as e:"],
                                                    [
                                                        225,
                                                        "                self._handle_exception(observation, e)",
                                                    ],
                                                    [226, "            finally:"],
                                                    [
                                                        227,
                                                        "                result = self._finalize_call(",
                                                    ],
                                                    [
                                                        228,
                                                        "                    observation, result, capture_output, transform_to_string",
                                                    ],
                                                    [229, "                )"],
                                                    [230, ""],
                                                ],
                                                "lineNo": 225,
                                                "colNo": None,
                                                "inApp": False,
                                                "trust": None,
                                                "errors": None,
                                                "lock": None,
                                                "sourceLink": None,
                                                "vars": {
                                                    "args": [
                                                        "<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent object at 0x7f8a86cb5650>",
                                                        "RootCauseAnalysisRequest(event_details=EventDetails(title='ValidationError: 1 validation error for GroupingRequest', exceptions=[ExceptionDetails(type='ValidationError', value=\"1 validation error for GroupingRequest\\nstacktrace\\n  Value error, stacktrace must be provided and not empty. [type=value_error, input_value='', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\", stacktrace=Stacktrace(frames=[StacktraceFrame(function='wrapper', filename='src/seer/json_api.py', abs_path='/app/src/seer/json_api.py', line_no=132, col_no=None, context=[(127, '            if not isinstance(data, dict):'), (128, '                sentry_sdk.capture_message(f\"Data is not an object: {type(data)}\")'), (129, '                raise BadRequest(\"Data is not an object\")'), (130, ''), (131, '            try:'), (132, '                result: BaseModel = implementation(request_annotation.model_validate(data))'), (133, '            except ValidationError as e:'), (134, '                ...",
                                                    ],
                                                    "as_type": "None",
                                                    "capture_input": "True",
                                                    "capture_output": "True",
                                                    "func": "<function RootCauseAnalysisComponent.invoke at 0x7f8a86d8fb00>",
                                                    "kwargs": {},
                                                    "name": "'Root Cause Analysis'",
                                                    "observation": "<langfuse.client.StatefulSpanClient object at 0x7f8c29a9f4d0>",
                                                    "result": "None",
                                                    "self": "<langfuse.decorators.langfuse_decorator.LangfuseDecorator object at 0x7f8a8954fa50>",
                                                },
                                            },
                                            {
                                                "filename": "langfuse/decorators/langfuse_decorator.py",
                                                "absPath": "/usr/local/lib/python3.11/dist-packages/langfuse/decorators/langfuse_decorator.py",
                                                "module": "langfuse.decorators.langfuse_decorator",
                                                "package": None,
                                                "platform": None,
                                                "instructionAddr": None,
                                                "symbolAddr": None,
                                                "function": "_handle_exception",
                                                "rawFunction": None,
                                                "symbol": None,
                                                "context": [
                                                    [426, "    ):"],
                                                    [427, "        if observation:"],
                                                    [
                                                        428,
                                                        "            _observation_params_context.get()[observation.id].update(",
                                                    ],
                                                    [
                                                        429,
                                                        '                level="ERROR", status_message=str(e)',
                                                    ],
                                                    [430, "            )"],
                                                    [431, "        raise e"],
                                                    [432, ""],
                                                    [433, "    def _wrap_sync_generator_result("],
                                                    [434, "        self,"],
                                                    [435, "        observation: Optional["],
                                                    [436, "            Union["],
                                                ],
                                                "lineNo": 431,
                                                "colNo": None,
                                                "inApp": False,
                                                "trust": None,
                                                "errors": None,
                                                "lock": None,
                                                "sourceLink": None,
                                                "vars": {
                                                    "e": "1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing, input_value={'file_path': 'src/test/s...d validation behavior.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing",
                                                    "observation": "<langfuse.client.StatefulSpanClient object at 0x7f8c29a9f4d0>",
                                                    "self": "<langfuse.decorators.langfuse_decorator.LangfuseDecorator object at 0x7f8a8954fa50>",
                                                },
                                            },
                                            {
                                                "filename": "langfuse/decorators/langfuse_decorator.py",
                                                "absPath": "/usr/local/lib/python3.11/dist-packages/langfuse/decorators/langfuse_decorator.py",
                                                "module": "langfuse.decorators.langfuse_decorator",
                                                "package": None,
                                                "platform": None,
                                                "instructionAddr": None,
                                                "symbolAddr": None,
                                                "function": "sync_wrapper",
                                                "rawFunction": None,
                                                "symbol": None,
                                                "context": [
                                                    [218, "                func_kwargs=kwargs,"],
                                                    [219, "            )"],
                                                    [220, "            result = None"],
                                                    [221, ""],
                                                    [222, "            try:"],
                                                    [
                                                        223,
                                                        "                result = func(*args, **kwargs)",
                                                    ],
                                                    [224, "            except Exception as e:"],
                                                    [
                                                        225,
                                                        "                self._handle_exception(observation, e)",
                                                    ],
                                                    [226, "            finally:"],
                                                    [
                                                        227,
                                                        "                result = self._finalize_call(",
                                                    ],
                                                    [
                                                        228,
                                                        "                    observation, result, capture_output, transform_to_string",
                                                    ],
                                                ],
                                                "lineNo": 223,
                                                "colNo": None,
                                                "inApp": False,
                                                "trust": None,
                                                "errors": None,
                                                "lock": None,
                                                "sourceLink": None,
                                                "vars": {
                                                    "args": [
                                                        "<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent object at 0x7f8a86cb5650>",
                                                        "RootCauseAnalysisRequest(event_details=EventDetails(title='ValidationError: 1 validation error for GroupingRequest', exceptions=[ExceptionDetails(type='ValidationError', value=\"1 validation error for GroupingRequest\\nstacktrace\\n  Value error, stacktrace must be provided and not empty. [type=value_error, input_value='', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\", stacktrace=Stacktrace(frames=[StacktraceFrame(function='wrapper', filename='src/seer/json_api.py', abs_path='/app/src/seer/json_api.py', line_no=132, col_no=None, context=[(127, '            if not isinstance(data, dict):'), (128, '                sentry_sdk.capture_message(f\"Data is not an object: {type(data)}\")'), (129, '                raise BadRequest(\"Data is not an object\")'), (130, ''), (131, '            try:'), (132, '                result: BaseModel = implementation(request_annotation.model_validate(data))'), (133, '            except ValidationError as e:'), (134, '                ...",
                                                    ],
                                                    "as_type": "None",
                                                    "capture_input": "True",
                                                    "capture_output": "True",
                                                    "func": "<function RootCauseAnalysisComponent.invoke at 0x7f8a86d8fb00>",
                                                    "kwargs": {},
                                                    "name": "'Root Cause Analysis'",
                                                    "observation": "<langfuse.client.StatefulSpanClient object at 0x7f8c29a9f4d0>",
                                                    "result": "None",
                                                    "self": "<langfuse.decorators.langfuse_decorator.LangfuseDecorator object at 0x7f8a8954fa50>",
                                                },
                                            },
                                            {
                                                "filename": "seer/dependency_injection.py",
                                                "absPath": "/app/src/seer/dependency_injection.py",
                                                "module": "seer.dependency_injection",
                                                "package": None,
                                                "platform": None,
                                                "instructionAddr": None,
                                                "symbolAddr": None,
                                                "function": "wrapper",
                                                "rawFunction": None,
                                                "symbol": None,
                                                "context": [
                                                    [230, "                    try:"],
                                                    [
                                                        231,
                                                        "                        new_kwds[k] = resolve(argspec.annotations[k])",
                                                    ],
                                                    [232, "                    except KeyError:"],
                                                    [
                                                        233,
                                                        '                        raise AssertionError(f"Cannot inject argument {k} as it lacks annotations")',
                                                    ],
                                                    [234, ""],
                                                    [
                                                        235,
                                                        "        return c(*args, **new_kwds)  # type: ignore",
                                                    ],
                                                    [236, ""],
                                                    [237, "    if inspect.isclass(original_type):"],
                                                    [
                                                        238,
                                                        "        return type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type: ignore",
                                                    ],
                                                    [239, ""],
                                                    [240, "    return wrapper  # type: ignore"],
                                                ],
                                                "lineNo": 235,
                                                "colNo": None,
                                                "inApp": True,
                                                "trust": None,
                                                "errors": None,
                                                "lock": None,
                                                "sourceLink": None,
                                                "vars": {
                                                    "arg_idx": "2",
                                                    "arg_name": "'llm_client'",
                                                    "args": [
                                                        "<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent object at 0x7f8a86cb5650>",
                                                        "RootCauseAnalysisRequest(event_details=EventDetails(title='ValidationError: 1 validation error for GroupingRequest', exceptions=[ExceptionDetails(type='ValidationError', value=\"1 validation error for GroupingRequest\\nstacktrace\\n  Value error, stacktrace must be provided and not empty. [type=value_error, input_value='', input_type=str]\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\", stacktrace=Stacktrace(frames=[StacktraceFrame(function='wrapper', filename='src/seer/json_api.py', abs_path='/app/src/seer/json_api.py', line_no=132, col_no=None, context=[(127, '            if not isinstance(data, dict):'), (128, '                sentry_sdk.capture_message(f\"Data is not an object: {type(data)}\")'), (129, '                raise BadRequest(\"Data is not an object\")'), (130, ''), (131, '            try:'), (132, '                result: BaseModel = implementation(request_annotation.model_validate(data))'), (133, '            except ValidationError as e:'), (134, '                ...",
                                                    ],
                                                    "argspec": [
                                                        ["'self'", "'request'", "'llm_client'"],
                                                        "None",
                                                        "None",
                                                        [
                                                            "<seer.dependency_injection._Injected object at 0x7f8b44a59210>"
                                                        ],
                                                        [],
                                                        "None",
                                                        {
                                                            "llm_client": "<class 'seer.automation.agent.client.LlmClient'>",
                                                            "request": "<class 'seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest'>",
                                                            "return": "<class 'seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput'>",
                                                        },
                                                    ],
                                                    "d": "<seer.dependency_injection._Injected object at 0x7f8b44a59210>",
                                                    "i": "0",
                                                    "kwargs": {},
                                                    "new_kwds": {
                                                        "llm_client": "<seer.automation.agent.client.LlmClient object at 0x7f8c298ea050>"
                                                    },
                                                    "offset": "2",
                                                    "resolved": "<seer.automation.agent.client.LlmClient object at 0x7f8c298ea050>",
                                                },
                                            },
                                            {
                                                "filename": "seer/automation/autofix/components/root_cause/component.py",
                                                "absPath": "/app/src/seer/automation/autofix/components/root_cause/component.py",
                                                "module": "seer.automation.autofix.components.root_cause.component",
                                                "package": None,
                                                "platform": None,
                                                "instructionAddr": None,
                                                "symbolAddr": None,
                                                "function": "invoke",
                                                "rawFunction": None,
                                                "symbol": None,
                                                "context": [
                                                    [
                                                        117,
                                                        "                    response_format=MultipleRootCauseAnalysisOutputPrompt,",
                                                    ],
                                                    [
                                                        118,
                                                        '                    run_name="Root Cause Extraction & Formatting",',
                                                    ],
                                                    [119, "                )"],
                                                    [120, ""],
                                                    [
                                                        121,
                                                        "                # Assign the ids to be the numerical indices of the causes and relevant code context",
                                                    ],
                                                    [
                                                        122,
                                                        "                cause_model = formatted_response.parsed.cause.to_model()",
                                                    ],
                                                    [123, "                cause_model.id = 0"],
                                                    [
                                                        124,
                                                        "                if cause_model.code_context:",
                                                    ],
                                                    [
                                                        125,
                                                        "                    for j, snippet in enumerate(cause_model.code_context):",
                                                    ],
                                                    [126, "                        snippet.id = j"],
                                                    [127, ""],
                                                ],
                                                "lineNo": 122,
                                                "colNo": None,
                                                "inApp": True,
                                                "trust": None,
                                                "errors": None,
                                                "lock": None,
                                                "sourceLink": None,
                                                "vars": {
                                                    "agent": "<seer.automation.autofix.autofix_agent.AutofixAgent object at 0x7f8a84380590>",
                                                    "cur": "AutofixContinuation(run_id=1395, steps=[DefaultStep(id='29ed661c-6650-4d40-9798-b40d865a20c8', key='root_cause_analysis_processing', title='Analyzing the Issue', type=<StepType.DEFAULT: 'default'>, status=<AutofixStatus.PROCESSING: 'PROCESSING'>, index=0, progress=[ProgressItem(timestamp='2024-11-12T01:47:43.958807', message='Beginning root cause analysis...', type=<ProgressType.INFO: 'INFO'>, data=None)], completedMessage=None, queued_user_messages=[], insights=[InsightSharingOutput(insight='The root cause is that the stacktrace field is incorrectly populated as an empty string, violating validation rules.', codebase_context=[CodeSnippetContext(repo_name='getsentry/seer', file_path='src/seer/json_api.py', snippet='if not isinstance(data, dict):\\n    sentry_sdk.capture_message(f\"Data is not an object: {type(data)}\")\\n    raise BadRequest(\"Data is not an object\")\\n\\ntry:\\n    result: BaseModel = implementation(request_annotation.model_validate(data))  # This line fails because the model validation rejects e...",
                                                    "formatted_response": "LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title='Empty Stacktrace Validation Failure in GroupingRequest Model', description=\"The issue is occurring because the incoming request contains an empty stacktrace value, which violates the Pydantic model validation rules for GroupingRequest. The validation system is explicitly configured to reject empty stacktraces, but the client is sending an empty string ('') instead of a valid stacktrace.\\n\\nThis represents a contract violation between the client and server, where the server expects a non-empty stacktrace for grouping operations, but the client is not providing one. This is likely either a client-side bug where the stacktrace is being lost/cleared before submission, or a misunderstanding of the API requirements by the client implementation.\\n\\nTo fix this, either:\\n1. The client needs to ensure it always sends a ...",
                                                },
                                            },
                                            {
                                                "filename": "seer/automation/autofix/components/root_cause/models.py",
                                                "absPath": "/app/src/seer/automation/autofix/components/root_cause/models.py",
                                                "module": "seer.automation.autofix.components.root_cause.models",
                                                "package": None,
                                                "platform": None,
                                                "instructionAddr": None,
                                                "symbolAddr": None,
                                                "function": "to_model",
                                                "rawFunction": None,
                                                "symbol": None,
                                                "context": [
                                                    [125, "                else None"],
                                                    [126, "            ),"],
                                                    [127, "        )"],
                                                    [128, ""],
                                                    [129, "    def to_model(self):"],
                                                    [
                                                        130,
                                                        "        return RootCauseAnalysisItem.model_validate(",
                                                    ],
                                                    [131, "            {"],
                                                    [132, "                **self.model_dump(),"],
                                                    [
                                                        133,
                                                        '                # "reproduction": self.reproduction_instructions,',
                                                    ],
                                                    [134, '                # "unit_test": ('],
                                                    [135, "                #     {"],
                                                ],
                                                "lineNo": 130,
                                                "colNo": None,
                                                "inApp": True,
                                                "trust": None,
                                                "errors": None,
                                                "lock": None,
                                                "sourceLink": None,
                                                "vars": {
                                                    "self": "RootCauseAnalysisItemPrompt(title='Empty Stacktrace Validation Failure in GroupingRequest Model', description=\"The issue is occurring because the incoming request contains an empty stacktrace value, which violates the Pydantic model validation rules for GroupingRequest. The validation system is explicitly configured to reject empty stacktraces, but the client is sending an empty string ('') instead of a valid stacktrace.\\n\\nThis represents a contract violation between the client and server, where the server expects a non-empty stacktrace for grouping operations, but the client is not providing one. This is likely either a client-side bug where the stacktrace is being lost/cleared before submission, or a misunderstanding of the API requirements by the client implementation.\\n\\nTo fix this, either:\\n1. The client needs to ensure it always sends a valid stacktrace.\\n2. The validation rules need to be adjusted if empty stacktraces are actually valid in some cases.\\n3. Better error messaging should be added to ..."
                                                },
                                            },
                                        ],
                                        "framesOmitted": None,
                                        "registers": None,
                                        "hasSystemFrames": True,
                                    },
                                    "rawStacktrace": None,
                                }
                            ],
                            "hasSystemFrames": True,
                            "excOmitted": None,
                        },
                        "type": "exception",
                    },
                    {
                        "data": {
                            "values": [
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:43.867768Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "http://frontend-internal.sentry/api/0/internal/seer-rpc/get_organization_slug/",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:44.081462Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "GET",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "https://api.github.com/repos/getsentry/seer/installation",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:44.251720Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 201,
                                        "reason": "Created",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "[Filtered]",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:44.443304Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "GET",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "https://api.github.com/repositories/439438299",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:44.538171Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 207,
                                        "reason": "Multi-Status",
                                        "thread.id": "140238403765824",
                                        "thread.name": "Thread-4",
                                        "url": "https://langfuse-prod-dbvpv3w3rq-uc.a.run.app/api/public/ingestion",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:44.854293Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "GET",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "https://api.github.com/repos/getsentry/seer/branches/main",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:45.240510Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "GET",
                                        "http.query": "recursive=1",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "https://api.github.com/repos/getsentry/seer/git/trees/5562d4f9f6b0e5a2f349ce46e4a00c25712f5cf2",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:45.663631Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 207,
                                        "reason": "Multi-Status",
                                        "thread.id": "140238403765824",
                                        "thread.name": "Thread-4",
                                        "url": "https://langfuse-prod-dbvpv3w3rq-uc.a.run.app/api/public/ingestion",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:46.103067Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "https://api.openai.com/v1/chat/completions",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:46.351150Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 207,
                                        "reason": "Multi-Status",
                                        "thread.id": "140238403765824",
                                        "thread.name": "Thread-4",
                                        "url": "https://langfuse-prod-dbvpv3w3rq-uc.a.run.app/api/public/ingestion",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:46.413800Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "GET",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "http://169.254.169.254",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:46.416901Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "GET",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "http://metadata.google.internal/computeMetadata/v1/project/project-id",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:46.423484Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "GET",
                                        "http.query": "recursive=true",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:46.426054Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "GET",
                                        "http.query": "[Filtered]",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "[Filtered]",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:46.919418Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 207,
                                        "reason": "Multi-Status",
                                        "thread.id": "140238403765824",
                                        "thread.name": "Thread-4",
                                        "url": "https://langfuse-prod-dbvpv3w3rq-uc.a.run.app/api/public/ingestion",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:57.570028Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "https://us-east5-aiplatform.googleapis.com/v1/projects/internal-sentry/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:rawPredict",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:58.211123Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 207,
                                        "reason": "Multi-Status",
                                        "thread.id": "140238403765824",
                                        "thread.name": "Thread-4",
                                        "url": "https://langfuse-prod-dbvpv3w3rq-uc.a.run.app/api/public/ingestion",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:58.269397Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140239964104256",
                                        "thread.name": "Thread-5 (wrapper)",
                                        "url": "https://api.openai.com/v1/chat/completions",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:47:58.865084Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 207,
                                        "reason": "Multi-Status",
                                        "thread.id": "140238403765824",
                                        "thread.name": "Thread-4",
                                        "url": "https://langfuse-prod-dbvpv3w3rq-uc.a.run.app/api/public/ingestion",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:47:59.281624Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:47:59.384314Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:47:59.486783Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:47:59.589152Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:47:59.691625Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:47:59.794334Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:47:59.896979Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:47:59.999686Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.102347Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.205788Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.308287Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.410848Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.513331Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.615725Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.718069Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.820874Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:00.923549Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.026347Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.128806Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.231200Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.333957Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.436506Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:48:01.507396Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140239964104256",
                                        "thread.name": "Thread-5 (wrapper)",
                                        "url": "https://api.openai.com/v1/chat/completions",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.511848Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.514388Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.515926Z",
                                    "level": "info",
                                    "message": "UPDATE run_state\nSET value=%(value)s::JSON, updated_at=%(updated_at)s::TIMESTAMP WITHOUT TIME ZONE\nWHERE run_state.id = %(run_state_id)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "UPDATE run_state SET value=%(value)s::JSON, updated_at=%(updated_at)s::TIMESTAMP WITHOUT TIME ZONE WHERE run_state.id = %(run_state_id)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.518540Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.520781Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.522986Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.524405Z",
                                    "level": "info",
                                    "message": "UPDATE run_state\nSET value=%(value)s::JSON, updated_at=%(updated_at)s::TIMESTAMP WITHOUT TIME ZONE\nWHERE run_state.id = %(run_state_id)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "UPDATE run_state SET value=%(value)s::JSON, updated_at=%(updated_at)s::TIMESTAMP WITHOUT TIME ZONE WHERE run_state.id = %(run_state_id)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.539492Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.641997Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.744657Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.846930Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:01.949307Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:48:01.952554Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 207,
                                        "reason": "Multi-Status",
                                        "thread.id": "140238403765824",
                                        "thread.name": "Thread-4",
                                        "url": "https://langfuse-prod-dbvpv3w3rq-uc.a.run.app/api/public/ingestion",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.051781Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.154339Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.257216Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.359758Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.462439Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.565749Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.668538Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.771088Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.873719Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:02.976316Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.078783Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.181469Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.284315Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.386875Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.490562Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.593280Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.695993Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.798564Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:03.901218Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.003797Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.106465Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.208975Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.311320Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.414084Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.516796Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.619553Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.722119Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.825001Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:04.927925Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.030765Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.133597Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.236226Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.338969Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.441967Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.544485Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.646871Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.749288Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.852212Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:05.955551Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.058296Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.161026Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.263708Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.366246Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.468778Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.571159Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.673620Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.776058Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.878785Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:06.981645Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.084592Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.187867Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.291032Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.393732Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.496438Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.599235Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.701860Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.804350Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:07.906978Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:08.009406Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:08.111806Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:08.214347Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:08.316899Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:08.419531Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "http",
                                    "timestamp": "2024-11-12T01:48:08.468892Z",
                                    "level": "info",
                                    "message": None,
                                    "category": "httplib",
                                    "data": {
                                        "http.fragment": "",
                                        "http.method": "POST",
                                        "http.query": "",
                                        "http.response.status_code": 200,
                                        "reason": "OK",
                                        "thread.id": "140240063661184",
                                        "thread.name": "MainThread",
                                        "url": "https://api.openai.com/v1/chat/completions",
                                    },
                                    "event_id": None,
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:08.473755Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:08.476445Z",
                                    "level": "info",
                                    "message": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id,\n       run_state.type AS run_state_type, run_state.value AS run_state_value,\n       run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at\nFROM run_state\nWHERE run_state.id = %(pk_1)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "SELECT run_state.id AS run_state_id, run_state.group_id AS run_state_group_id, run_state.type AS run_state_type, run_state.value AS run_state_value, run_state.last_triggered_at AS run_state_last_triggered_at, run_state.updated_at AS run_state_updated_at \nFROM run_state \nWHERE run_state.id = %(pk_1)s::INTEGER",
                                },
                                {
                                    "type": "default",
                                    "timestamp": "2024-11-12T01:48:08.478016Z",
                                    "level": "info",
                                    "message": "UPDATE run_state\nSET value=%(value)s::JSON, updated_at=%(updated_at)s::TIMESTAMP WITHOUT TIME ZONE\nWHERE run_state.id = %(run_state_id)s::INTEGER",
                                    "category": "query",
                                    "data": None,
                                    "event_id": None,
                                    "messageFormat": "sql",
                                    "messageRaw": "UPDATE run_state SET value=%(value)s::JSON, updated_at=%(updated_at)s::TIMESTAMP WITHOUT TIME ZONE WHERE run_state.id = %(run_state_id)s::INTEGER",
                                },
                            ]
                        },
                        "type": "breadcrumbs",
                    },
                ],
                "dist": None,
                "message": "",
                "title": "ValidationError: 1 validation error for RootCauseAnalysisItem",
                "location": "seer/automation/autofix/components/root_cause/models.py",
                "user": None,
                "contexts": {
                    "runtime": {
                        "name": "CPython",
                        "version": "3.11.0",
                        "build": "3.11.0rc1 (main, Aug 12 2022, 10:02:14) [GCC 11.2.0]",
                        "type": "runtime",
                    },
                    "trace": {
                        "trace_id": "55563c0f425a4fac89ab3d77fb6b7a83",
                        "span_id": "b73676cf38cfe148",
                        "parent_span_id": "be290b413628f463",
                        "op": "ai.pipeline",
                        "status": "unknown",
                        "client_sample_rate": 0.2,
                        "origin": "manual",
                        "data": {"thread.name": "MainThread", "thread.id": "140240063661184"},
                        "description": "Autofix - Root Cause Step",
                        "type": "trace",
                    },
                },
                "sdk": {"name": "sentry.python.flask", "version": "2.18.0"},
                "context": {
                    "celery-job": {
                        "args": [],
                        "kwargs": {
                            "request": {
                                "initial_memory": [],
                                "run_id": 1395,
                                "step_id": 3.1581633495131787e38,
                            }
                        },
                        "task_name": "seer.automation.autofix.steps.root_cause_step.root_cause_task",
                    },
                    "sys.argv": [
                        "/usr/local/bin/celery",
                        "-A",
                        "src.celery_app.tasks",
                        "worker",
                        "--loglevel=info",
                        "-c",
                        "16",
                        "-Q",
                        "seer",
                        "-n",
                    ],
                },
                "packages": {
                    "aiohappyeyeballs": "2.4.3",
                    "aiohttp": "3.10.10",
                    "aiosignal": "1.3.1",
                    "alembic": "1.14.0",
                    "amqp": "5.2.0",
                    "annotated-types": "0.7.0",
                    "anthropic": "0.34.2",
                    "anyio": "4.6.2.post1",
                    "asgiref": "3.8.1",
                    "attrs": "24.2.0",
                    "backoff": "2.2.1",
                    "bcrypt": "4.2.0",
                    "billiard": "4.2.1",
                    "blinker": "1.8.2",
                    "build": "1.2.2.post1",
                    "cachetools": "5.5.0",
                    "celery": "5.3.6",
                    "celery-stubs": "0.1.3",
                    "certifi": "2024.8.30",
                    "cffi": "1.17.1",
                    "charset-normalizer": "2.1.1",
                    "chroma-hnswlib": "0.7.3",
                    "chromadb": "0.4.14",
                    "click": "8.1.7",
                    "click-didyoumean": "0.3.1",
                    "click-plugins": "1.1.1",
                    "click-repl": "0.3.0",
                    "cmdstanpy": "1.2.4",
                    "coloredlogs": "15.0.1",
                    "contourpy": "1.1.1",
                    "convertdate": "2.4.0",
                    "covdefaults": "2.3.0",
                    "coverage": "7.6.4",
                    "cryptography": "43.0.3",
                    "cycler": "0.11.0",
                    "cython": "3.0.2",
                    "datasets": "3.1.0",
                    "deprecated": "1.2.14",
                    "dill": "0.3.8",
                    "distro": "1.9.0",
                    "docstring_parser": "0.16",
                    "ephem": "4.1.4",
                    "fastapi": "0.115.4",
                    "filelock": "3.12.2",
                    "flask": "2.2.5",
                    "flask-migrate": "4.0.7",
                    "flask-sqlalchemy": "3.1.1",
                    "flatbuffers": "24.3.25",
                    "fonttools": "4.43.0",
                    "frozenlist": "1.5.0",
                    "fsspec": "2023.6.0",
                    "google-api-core": "2.22.0",
                    "google-auth": "2.36.0",
                    "google-cloud-aiplatform": "1.71.1",
                    "google-cloud-bigquery": "3.26.0",
                    "google-cloud-core": "2.4.1",
                    "google-cloud-resource-manager": "1.13.0",
                    "google-cloud-secret-manager": "2.21.0",
                    "google-cloud-storage": "2.18.2",
                    "google-crc32c": "1.6.0",
                    "google-resumable-media": "2.7.2",
                    "googleapis-common-protos": "1.65.0",
                    "greenlet": "3.1.1",
                    "grpc-google-iam-v1": "0.13.1",
                    "grpc-stubs": "1.53.0.5",
                    "grpcio": "1.67.1",
                    "grpcio-health-checking": "1.67.1",
                    "grpcio-reflection": "1.67.1",
                    "grpcio-status": "1.67.1",
                    "gunicorn": "22.0.0",
                    "h11": "0.14.0",
                    "holidays": "0.31",
                    "httpcore": "1.0.6",
                    "httptools": "0.6.4",
                    "httpx": "0.27.2",
                    "huggingface-hub": "0.26.2",
                    "humanfriendly": "10.0",
                    "idna": "3.10",
                    "importlib-resources": "6.0.1",
                    "iniconfig": "2.0.0",
                    "isodate": "0.7.2",
                    "itsdangerous": "2.1.2",
                    "jinja2": "3.1.4",
                    "jiter": "0.7.0",
                    "joblib": "1.3.2",
                    "johen": "0.1.5",
                    "jsonschema": "4.23.0",
                    "jsonschema-path": "0.3.3",
                    "jsonschema-spec": "0.2.4",
                    "jsonschema-specifications": "2023.7.1",
                    "kiwisolver": "1.4.5",
                    "kombu": "5.4.2",
                    "langfuse": "2.43.3",
                    "lazy-object-proxy": "1.10.0",
                    "llvmlite": "0.43.0",
                    "lunarcalendar": "0.0.9",
                    "mako": "1.3.6",
                    "markdown-it-py": "3.0.0",
                    "markupsafe": "2.1.3",
                    "matplotlib": "3.9.2",
                    "mdurl": "0.1.2",
                    "monotonic": "1.6",
                    "more-itertools": "10.5.0",
                    "mpmath": "1.3.0",
                    "multidict": "6.1.0",
                    "multiprocess": "0.70.16",
                    "mypy": "1.8.0",
                    "mypy-extensions": "1.0.0",
                    "networkx": "3.1",
                    "nltk": "3.9.1",
                    "numba": "0.60.0",
                    "numpy": "1.26.1",
                    "nvidia-cublas-cu12": "12.1.3.1",
                    "nvidia-cuda-cupti-cu12": "12.1.105",
                    "nvidia-cuda-nvrtc-cu12": "12.1.105",
                    "nvidia-cuda-runtime-cu12": "12.1.105",
                    "nvidia-cudnn-cu12": "8.9.2.26",
                    "nvidia-cufft-cu12": "11.0.2.54",
                    "nvidia-curand-cu12": "10.3.2.106",
                    "nvidia-cusolver-cu12": "11.4.5.107",
                    "nvidia-cusparse-cu12": "12.1.0.106",
                    "nvidia-nccl-cu12": "2.19.3",
                    "nvidia-nvjitlink-cu12": "12.6.77",
                    "nvidia-nvtx-cu12": "12.1.105",
                    "onnx": "1.16.0",
                    "onnxruntime": "1.20.0",
                    "openai": "1.54.2",
                    "openapi-core": "0.18.2",
                    "openapi-schema-validator": "0.6.2",
                    "openapi-spec-validator": "0.7.1",
                    "optimum": "1.16.2",
                    "overrides": "7.7.0",
                    "packaging": "23.2",
                    "pandas": "2.0.3",
                    "pandas-stubs": "2.1.4.231227",
                    "parse": "1.20.2",
                    "pathable": "0.4.3",
                    "patsy": "0.5.3",
                    "pgvector": "0.2.4",
                    "pillow": "10.3.0",
                    "pip": "24.0",
                    "pip-tools": "7.4.1",
                    "pluggy": "1.5.0",
                    "posthog": "3.7.0",
                    "prompt_toolkit": "3.0.48",
                    "propcache": "0.2.0",
                    "prophet": "1.1.6",
                    "proto-plus": "1.25.0",
                    "protobuf": "5.28.3",
                    "psycopg": "3.1.18",
                    "pulsar-client": "3.5.0",
                    "pyarrow": "18.0.0",
                    "pyasn1": "0.6.1",
                    "pyasn1_modules": "0.4.1",
                    "pycparser": "2.22",
                    "pydantic": "2.6.4",
                    "pydantic-xml": "2.13.1",
                    "pydantic_core": "2.16.3",
                    "pygithub": "2.1.1",
                    "pygments": "2.18.0",
                    "pyjwt": "2.9.0",
                    "pymeeus": "0.5.12",
                    "pynacl": "1.5.0",
                    "pyparsing": "3.0.9",
                    "pypika": "0.48.9",
                    "pyproject_hooks": "1.2.0",
                    "pytest": "7.4.3",
                    "pytest-alembic": "0.11.1",
                    "pytest-asyncio": "0.23.5",
                    "pytest-cov": "4.0.0",
                    "python-dateutil": "2.8.2",
                    "python-dotenv": "1.0.1",
                    "pytz": "2021.3",
                    "pyyaml": "6.0.1",
                    "rapidfuzz": "3.10.1",
                    "referencing": "0.30.2",
                    "regex": "2023.8.8",
                    "requests": "2.32.2",
                    "rfc3339-validator": "0.1.4",
                    "rich": "13.9.4",
                    "rpds-py": "0.21.0",
                    "rsa": "4.9",
                    "safetensors": "0.4.5",
                    "scikit-learn": "1.3.0",
                    "scipy": "1.11.2",
                    "seaborn": "0.12.2",
                    "seer": "0.1.0",
                    "sentence-transformers": "2.3.1",
                    "sentencepiece": "0.2.0",
                    "sentry-protos": "0.1.33",
                    "sentry-sdk": "2.18.0",
                    "setuptools": "59.6.0",
                    "shapely": "2.0.6",
                    "shellingham": "1.5.4",
                    "simdkalman": "1.0.2",
                    "six": "1.16.0",
                    "sniffio": "1.3.1",
                    "sqlalchemy": "2.0.25",
                    "stanio": "0.5.1",
                    "starlette": "0.41.2",
                    "statsmodels": "0.14.0",
                    "structlog": "24.4.0",
                    "stumpy": "1.13.0",
                    "supervisor": "4.2.1",
                    "sympy": "1.12",
                    "threadpoolctl": "3.2.0",
                    "tokenizers": "0.15.2",
                    "torch": "2.2.0",
                    "tqdm": "4.66.3",
                    "transformers": "4.37.2",
                    "tree-sitter": "0.21.3",
                    "tree-sitter-languages": "1.10.2",
                    "triton": "2.2.0",
                    "typer": "0.12.5",
                    "types-colorama": "0.4.15.12",
                    "types-flask-migrate": "4.0.0.20240311",
                    "types-jsonschema": "4.20.0.20240105",
                    "types-openpyxl": "3.1.0.32",
                    "types-pillow": "10.1.0.0",
                    "types-python-dateutil": "2.8.19.20240106",
                    "types-pytz": "2023.3.1.1",
                    "types-pywin32": "306.0.0.8",
                    "types-pyyaml": "6.0.12.1",
                    "types-requests": "2.25.0",
                    "types-setuptools": "69.0.0.0",
                    "types-tabulate": "0.9.0.3",
                    "types-tqdm": "4.66.0.5",
                    "typing_extensions": "4.12.2",
                    "tzdata": "2023.3",
                    "unidiff": "0.7.5",
                    "urllib3": "1.26.19",
                    "uvicorn": "0.32.0",
                    "uvloop": "0.21.0",
                    "vine": "5.1.0",
                    "watchdog": "6.0.0",
                    "watchfiles": "0.24.0",
                    "wcwidth": "0.2.13",
                    "websockets": "13.1",
                    "werkzeug": "3.0.3",
                    "wheel": "0.44.0",
                    "wrapt": "1.16.0",
                    "xxhash": "3.5.0",
                    "yarl": "1.17.1",
                },
                "type": "error",
                "metadata": {
                    "filename": "seer/automation/autofix/components/root_cause/models.py",
                    "function": "to_model",
                    "in_app_frame_mix": "mixed",
                    "type": "ValidationError",
                    "value": "1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing, input_value={'file_path': 'src/test/s...d validation behavior.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing",
                },
                "tags": [
                    {"key": "celery_task_id", "value": "a5915e26-6ea3-4e78-a12f-3b8b8d5fd925"},
                    {"key": "environment", "value": "production"},
                    {"key": "handled", "value": "no"},
                    {"key": "level", "value": "error"},
                    {"key": "mechanism", "value": "ai_monitoring"},
                    {"key": "release", "value": "5562d4f9f6b0e5a2f349ce46e4a00c25712f5cf2"},
                    {"key": "runtime", "value": "CPython 3.11.0"},
                    {"key": "runtime.name", "value": "CPython"},
                    {"key": "server_name", "value": "seer-web-autofix-d7b9466df-9qjrn"},
                    {
                        "key": "transaction",
                        "value": "seer.automation.autofix.steps.root_cause_step.root_cause_task",
                    },
                ],
                "platform": "python",
                "dateReceived": "2024-11-12T01:48:08.581059Z",
                "errors": [],
                "occurrence": None,
                "_meta": {
                    "entries": {
                        "0": {
                            "data": {
                                "values": {
                                    "0": {
                                        "": None,
                                        "type": None,
                                        "value": None,
                                        "mechanism": None,
                                        "threadId": None,
                                        "module": None,
                                        "stacktrace": {
                                            "": None,
                                            "frames": {
                                                "0": {
                                                    "vars": {
                                                        "": {"len": 5},
                                                        "state": {
                                                            "": {
                                                                "rem": [
                                                                    ["@password:filter", "s", 0, 10]
                                                                ],
                                                                "len": 1024,
                                                                "chunks": [
                                                                    {
                                                                        "type": "redaction",
                                                                        "text": "[Filtered]",
                                                                        "rule_id": "@password:filter",
                                                                        "remark": "s",
                                                                    }
                                                                ],
                                                            }
                                                        },
                                                    }
                                                },
                                                "5": {
                                                    "vars": {
                                                        "": {"len": 10},
                                                        "formatted_response": {
                                                            "": {
                                                                "rem": [["!limit", "s", 938, 941]],
                                                                "len": 1024,
                                                                "chunks": [
                                                                    {
                                                                        "type": "text",
                                                                        "text": "LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title='Empty Stacktrace Validation Failure in GroupingRequest Model', description=\"The issue is occurring because the incoming request contains an empty stacktrace value, which violates the Pydantic model validation rules for GroupingRequest. The validation system is explicitly configured to reject empty stacktraces, but the client is sending an empty string ('') instead of a valid stacktrace.\\n\\nThis represents a contract violation between the client and server, where the server expects a non-empty stacktrace for grouping operations, but the client is not providing one. This is likely either a client-side bug where the stacktrace is being lost/cleared before submission, or a misunderstanding of the API requirements by the client implementation.\\n\\nTo fix this, either:\\n1. The client needs to ensure it always sends a ",
                                                                    },
                                                                    {
                                                                        "type": "redaction",
                                                                        "text": "...",
                                                                        "rule_id": "!limit",
                                                                        "remark": "s",
                                                                    },
                                                                ],
                                                            }
                                                        },
                                                    }
                                                },
                                            },
                                            "framesOmitted": None,
                                            "registers": None,
                                        },
                                    }
                                }
                            }
                        },
                        "1": {
                            "data": {
                                "values": {
                                    "13": {
                                        "data": {
                                            "http.query": {
                                                "": {
                                                    "rem": [["@password:filter", "s", 0, 10]],
                                                    "len": 63,
                                                    "chunks": [
                                                        {
                                                            "type": "redaction",
                                                            "text": "[Filtered]",
                                                            "rule_id": "@password:filter",
                                                            "remark": "s",
                                                        }
                                                    ],
                                                }
                                            },
                                            "url": {
                                                "": {
                                                    "rem": [["@password:filter", "s", 0, 10]],
                                                    "len": 135,
                                                    "chunks": [
                                                        {
                                                            "type": "redaction",
                                                            "text": "[Filtered]",
                                                            "rule_id": "@password:filter",
                                                            "remark": "s",
                                                        }
                                                    ],
                                                }
                                            },
                                        }
                                    },
                                    "2": {
                                        "data": {
                                            "url": {
                                                "": {
                                                    "rem": [["@password:filter", "s", 0, 10]],
                                                    "len": 61,
                                                    "chunks": [
                                                        {
                                                            "type": "redaction",
                                                            "text": "[Filtered]",
                                                            "rule_id": "@password:filter",
                                                            "remark": "s",
                                                        }
                                                    ],
                                                }
                                            }
                                        }
                                    },
                                }
                            }
                        },
                    },
                    "message": None,
                    "user": None,
                    "contexts": None,
                    "sdk": None,
                    "context": {"sys.argv": {"": {"len": 11}}},
                    "packages": None,
                    "tags": {},
                },
                "crashFile": None,
                "culprit": "seer.automation.autofix.steps.root_cause_step.root_cause_task",
                "dateCreated": "2024-11-12T01:48:08Z",
                "fingerprints": [
                    "1c4ae6c199074fd548cdceb00432ba24",
                    "7a12cbe8cabe7dc25509473bb85c5c29",
                ],
                "groupingConfig": {
                    "enhancements": "KLUv_SAYwQAAkwKRs25ld3N0eWxlOjIwMjMtMDEtMTGQ",
                    "id": "newstyle:2023-01-11",
                },
                "release": {
                    "id": 1275781148,
                    "version": "5562d4f9f6b0e5a2f349ce46e4a00c25712f5cf2",
                    "status": "open",
                    "shortVersion": "5562d4f9f6b0e5a2f349ce46e4a00c25712f5cf2",
                    "versionInfo": {
                        "package": None,
                        "version": {"raw": "5562d4f9f6b0e5a2f349ce46e4a00c25712f5cf2"},
                        "description": "5562d4f9f6b0",
                        "buildHash": "5562d4f9f6b0e5a2f349ce46e4a00c25712f5cf2",
                    },
                    "ref": None,
                    "url": None,
                    "dateReleased": "2024-11-11T22:13:10.220575Z",
                    "dateCreated": "2024-11-11T21:00:00Z",
                    "data": {},
                    "newGroups": 6,
                    "owner": None,
                    "commitCount": 0,
                    "lastCommit": None,
                    "deployCount": 1,
                    "lastDeploy": {
                        "id": "61947683",
                        "environment": "production",
                        "dateStarted": None,
                        "dateFinished": "2024-11-11T22:13:09.700644Z",
                        "name": None,
                        "url": None,
                    },
                    "authors": [],
                    "projects": [
                        {
                            "id": 5723503,
                            "slug": "sentry-dev-env",
                            "name": "sentry-dev-env",
                            "newGroups": 1,
                            "platform": "",
                            "platforms": ["native", "python"],
                            "hasHealthData": False,
                        },
                        {
                            "id": 6178942,
                            "slug": "seer",
                            "name": "seer",
                            "newGroups": 5,
                            "platform": "python-flask",
                            "platforms": ["python"],
                            "hasHealthData": False,
                        },
                    ],
                    "firstEvent": "2024-11-11T22:13:47Z",
                    "lastEvent": "2024-11-12T23:12:57Z",
                    "currentProjectMeta": {},
                    "userAgent": None,
                },
                "userReport": None,
                "sdkUpdates": [],
                "resolvedWith": [],
                "nextEventID": None,
                "previousEventID": "d3e3a06632bb4dee8ce3b3dfc1b08cc2",
            }
        ],
    },
    "invoking_user": {"id": 1, "display_name": "Jenn Mueng"},
}
